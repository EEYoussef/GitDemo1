package stepDefinations;

import static io.restassured.RestAssured.given;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import static org.junit.Assert.*;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;
import io.restassured.RestAssured;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.builder.ResponseSpecBuilder;
import io.restassured.http.ContentType;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.specification.RequestSpecification;
import io.restassured.specification.ResponseSpecification;
import pojo.location;
import pojo.mapLocation;
import resources.APIResources;
import resources.TestDataBuild;
import resources.Utils;


public class StepDefination extends Utils{
	RequestSpecification  res;
	ResponseSpecification respec;
	Response response;
	TestDataBuild data = new TestDataBuild();
	@Given("Add Place Playload with {string} {string} {string}")
	public void add_place_playload_with(String name, String language, String address) throws IOException {
    // Write code here that turns the phrase above into concrete actions
			respec = new ResponseSpecBuilder().expectStatusCode(200).expectContentType(ContentType.JSON).build();
			res = given().spec(requestSpecification()).body(data.addPlacePayload(name,language,address));
		
		}



		@When("user calls {string} with Post http reques")
		public void user_calls_with_post_http_reques(String resource) {
			APIResources resourceAPI=APIResources.valueOf(resource);
			System.out.println(resourceAPI.getResource());
			response = res.when().post(resourceAPI.getResource())
					.then().spec(respec).extract().response();
				
		}
		@Then("the API call got sucess with status code {int}")
		public void the_api_call_got_sucess_with_status_code(Integer int1) {
		  assertEquals(response.getStatusCode(),200);
			
		}
		
		@Then("{string} in response body is {string}")
		public void in_response_body_is(String keyValue, String Expectedvalue) {
		
			String resp = response.asString();
		JsonPath js = new JsonPath(resp);
		
		assertEquals(js.get(keyValue).toString(),Expectedvalue);
		
		}




}
